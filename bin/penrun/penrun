#!/usr/bin/env bash

set -u
set -o pipefail

HR=0
HR_ARGS=()
HR_HOOKS=0
HR_HOOKS_ARGS=()
DEFAULT_ARGS=()

# $1: file
compress() {
    local f="$1"
    if [[ ! -f "$f" ]]; then
        return 1
    fi
    if [[ -z "${PENRUN_COMPRESS_OUTPUT-}" ]]; then
        return 1
    fi
    if [[ -n "${PENRUN_COMPRESS_THRESHOLD-}" ]] &&
      (( "$(stat --printf %s "$f")" <= "$PENRUN_COMPRESS_THRESHOLD" )); then
        return 1
    fi
    local algorithm="$PENRUN_COMPRESS_OUTPUT"

    case "$algorithm" in
        gz)    gzip "$f";;
        zst)   zstd --rm "$f";;
        *)     gzip "$f";;
    esac
    return "$?"
}

search_configs() {
    local pwd_conf="$PWD/.penrun.sh"
    if [[ -f "$pwd_conf" ]]; then
        export PENRUN_PWD_CONF="$pwd_conf"
    fi

    local git_root
    if git_root="$(git rev-parse --show-toplevel 2> /dev/null)"; then
        local git_root_conf="$git_root/.penrun.sh"
        if [[ -f "$git_root_conf" ]]; then
            export PENRUN_GIT_ROOT_CONF="$git_root_conf"
        fi
    fi

    local user_conf="$HOME/.config/penrun/config.sh"
    if [[ -f "$user_conf" ]]; then
        export PENRUN_USER_CONF="$user_conf"
    fi

    local global_conf="/etc/penrun/config.sh"
    if [[ -f "$user_conf" ]]; then
        export PENRUN_GLOBAL_CONF="$global_conf"
    fi
}

search_and_source_config() {
    search_configs

    if [[ -n "${PENRUN_PWD_CONF-}" ]]; then
        # shellcheck source=/dev/null
        source "$PENRUN_PWD_CONF"
        return 0
    fi
    if [[ -n "${PENRUN_GIT_ROOT_CONF-}" ]]; then
        # shellcheck source=/dev/null
        source "$PENRUN_GIT_ROOT_CONF"
        return 0
    fi
    if [[ -n "${PENRUN_USER_CONF-}" ]]; then
        # shellcheck source=/dev/null
        source "$PENRUN_USER_CONF"
        return 0
    fi
    if [[ -n "${PENRUN_GLOBAL_CONF-}" ]]; then
        # shellcheck source=/dev/null
        source "$PENRUN_GLOBAL_CONF"
        return 0
    fi
}

# $1: path
mkdir_if_not_exists() {
    if [[ ! -d "$1" ]]; then
        mkdir -p "$1"
    fi
}

isfunction() {
    if [[ "$(type -t "$1")" == "function" ]]; then
        return 0
    fi
    return 1
}

isabsolute() {
    if [[ "${1:0:1}" == "/" ]]; then
        return 0
    fi
    return 1
}

# Create META file in current directory.
# $1: artifacts dir
# $2: command
meta_create() {
    local filepath="$1/META"
    local cmd="$2"
    echo "COMMAND:${cmd[*]}" > "$filepath"
    echo "START:$(date --iso-8601=seconds)" >> "$filepath"
}

# $1: artifacts dir
# $2: exit code
meta_end() {
    local filepath="$1/META"
    local exit_code="$2"
    echo "END:$(date --iso-8601=seconds)" >> "$filepath"
    echo "EXIT:$exit_code" >> "$filepath"
}

# $1   : artifacts dir
# $2   : cd_in
# $3…$n: command
run_hook() {
    local artifactsdir="$1"
    local cd_in="$2"
    local raw_out
    shift 2

    if [[ "$1" == "pre_run" ]]; then
        raw_out="$artifactsdir/PRERUN_OUTPUT"
    elif [[ "$1" == "post_run" ]]; then
        raw_out="$artifactsdir/POSTRUN_OUTPUT"
    else
        echo "BUG: invalid hook"
        exit 1
    fi

    (
        trap 'compress $raw_out' EXIT

        if (( cd_in )); then
            cd "$artifactsdir" || exit
        fi
        if (( HR_HOOKS )); then
            if [[ -n "${PENRUN_NO_HOOK_CAPTURE-}" ]]; then
                "$@" | hr "${HR_HOOKS_ARGS[@]}"
            else
                "$@" | tee "$raw_out" | "${HR_HOOKS_ARGS[@]}"
            fi
        else
            if [[ -n "${PENRUN_NO_HOOK_CAPTURE-}" ]]; then
                "$@"
            else
                "$@" | tee "$raw_out"
            fi
        fi
    )
}

# $1   : artifacts dir
# $2   : cd_in
# $3…$n: command
run_cmd() {
    local latest
    local artifactsdir="$1"
    local cd_in="$2"
    local raw_out="$artifactsdir/OUTPUT"
    local envfile="$artifactsdir/ENV"
    latest="$(dirname "$artifactsdir")/LATEST"
    shift 2

    mkdir_if_not_exists "$artifactsdir"

    (
        if (( cd_in )); then
            cd "$artifactsdir" || exit
        fi
        printenv > "$envfile"
        meta_create "$artifactsdir" "$* ${DEFAULT_ARGS[*]}"
        ln -sfnr "$artifactsdir" "$latest"

        trap 'meta_end $artifactsdir $? && compress $raw_out' EXIT

        if (( HR )); then
            if [[ -n "${PENRUN_NO_CAPTURE-}" ]]; then
                "$@" "${DEFAULT_ARGS[@]}" 2>&1 | hr "${HR_ARGS[@]}"
            else
                "$@" "${DEFAULT_ARGS[@]}" 2>&1 | tee "$raw_out" | hr "${HR_ARGS[@]}"
            fi
        else
            if [[ -n "${PENRUN_NO_CAPTURE-}" ]]; then
                "$@" "${DEFAULT_ARGS[@]}" 2>&1
            else
                "$@" "${DEFAULT_ARGS[@]}" 2>&1 | tee "$raw_out"
            fi
        fi
    )
}

usage() {
    echo "$(basename "$0") [-rsDh] [-c FILE] [-d DIR] [-t TAG] COMMAND"
    echo ""
    echo "options:"
    echo " -c FILE  Use this config file exclusively"
    echo " -d DIR   Use artifactsdir DIR"
    echo " -D       Run COMMAND in artifactsdir"
    echo " -n       Do not use DEFAULT_ARGS from config"
    echo " -r       Produce readable penlog logs and pipe through 'hr'"
    echo " -s       Skip hooks"
    echo " -t TAG   Add a tag to this run"
    echo " -h       Show this page and exit."
}

main() {
    if (( $# == 0 )); then
        echo "error: no command specified"
        exit 1
    fi

    local artifactsdir
    local cd_in=0
    local use_default_args=1
    local skip_hooks=0
    local forced_config=""
    local tag=""

    while getopts "c:d:Dnrst:h" arg; do
        case "$arg" in
            c) forced_config="$OPTARG";;
            r) HR=1;;
            d) artifactsdir="$OPTARG";;
            D) cd_in=1;;
            n) use_default_args=0;;
            s) skip_hooks=1;;
            t) tag="$OPTARG";;
            h) usage && exit 0;;
            *) usage && exit 1;;
        esac
    done
    shift $((OPTIND-1))

    if (( $# < 1 )); then
        echo "error: no command specified"
    fi

    export PENRUN_COMMAND="$*"

    if [[ -n "$forced_config" ]]; then
        if [[ ! -f "$forced_config" ]]; then
            echo "error: config does not exist"
            exit 1
        fi
        search_configs
        # shellcheck source=/dev/null
        source "$forced_config"
    else
        search_and_source_config
    fi

    local scriptname
    scriptname="$(basename "$1")"
    # Strip the fileending here, otherwise a
    # tag might be stripped as well.
    scriptname="${scriptname%.*}"

    if [[ -n "$tag" ]]; then
        scriptname="$scriptname-$tag"
    fi
    if [[ -z "${artifactsdir-}" ]]; then
        artifactsdir="${PENRUN_ARTIFACTS_BASE:-$PWD}/${scriptname}/run-$(date +%Y%m%d-%H%M%S)"
    fi
    if ! isabsolute "$artifactsdir"; then
        artifactsdir="$PWD/$artifactsdir"
    fi

    local rundir="$artifactsdir"
    export PENRUN_ARTIFACTS="$artifactsdir"

    mkdir_if_not_exists "$rundir"

    if (( ! use_default_args )); then
        DEFAULT_ARGS=()
    fi

    if (( ! skip_hooks )) && isfunction "pre_run"; then
        if ! run_hook "$rundir" "$cd_in" "pre_run"; then
            echo "error: pre_run hook failed"
            exit 1
        fi
    fi

    local ret
    run_cmd "$rundir" "$cd_in" "$@"
    ret="$?"

    if (( ! skip_hooks )) && isfunction "post_run"; then
        if ! run_hook "$rundir" "$cd_in" "post_run"; then
            echo "error: post_run hook failed"
            exit 1
        fi
    fi

    return "$ret"
}

main "$@"
